[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Asier Ballesteros Domínguez. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ballesteros Domínguez (2025). MiceExtVal: Tools external validation Multiple Imputation Chained Equations methodology. R package version 0.0.1.","code":"@Manual{,   title = {MiceExtVal: Tools for external validation in Multiple Imputation by Chained Equations methodology},   author = {Asier {Ballesteros Domínguez}},   year = {2025},   note = {R package version 0.0.1}, }"},{"path":"/index.html","id":"miceextval","dir":"","previous_headings":"","what":"Tools for external validation in Multiple Imputation by Chained Equations methodology","title":"Tools for external validation in Multiple Imputation by Chained Equations methodology","text":"goal MiceExtVal give users tools externally validate models using multiple imputation methodology. lots tools externally validate models complete datasets lack tools working multiple imputed datasets. recommended use techniques like multiple imputation chained equations (MICE) impute missing values present, MICE methodology requires realize many alanysis imputed datasets . next graph shows flowchart multple imputed analysis. package generated assist users along external validation analysis.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for external validation in Multiple Imputation by Chained Equations methodology","text":"can install development version MiceExtVal GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"metodologianavarrabiomed/mice-ext-val\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tools for external validation in Multiple Imputation by Chained Equations methodology","text":"package assumes multiple imputed dataset long format imputed datasets. functions divided three groups, model definition functions starting wit mv_model, calculating model results starting calculate_ plots starting get_. mice package can obtain complete dataset long format example assume complete dataset called external_validation_data. Firstly, import package.","code":"complete <- mice::complete(imp, action = \"long\") library(MiceExtVal)"},{"path":"/index.html","id":"defining-a-model","dir":"","previous_headings":"Example","what":"Defining a model","title":"Tools for external validation in Multiple Imputation by Chained Equations methodology","text":"using mv_model can generate package model definitions. define Cox model use function mv_model_cox define logistic regression model use function mv_model_logreg. model different requirements generated.","code":""},{"path":"/index.html","id":"cox-model","dir":"","previous_headings":"Example > Defining a model","what":"Cox model","title":"Tools for external validation in Multiple Imputation by Chained Equations methodology","text":"define cox model need able describe following characteristics model. coefficients: list model coefficients means: list mean value derivation cohort model variables formula: Model formula \\(S_0(t)\\): Value basal survival function time study \\(t\\)","code":"cox_model <- mv_model_cox(  coefficients = list(x = 0.5, z = 0.3),  means = list(x = 3, z = 0.2),  formula = event ~ x + z,  S0 = 0.98765 )"},{"path":"/index.html","id":"logistic-regression-model","dir":"","previous_headings":"Example > Defining a model","what":"Logistic regression model","title":"Tools for external validation in Multiple Imputation by Chained Equations methodology","text":"Similarly Cox model need able describe following characteristics model. coefficients: list model coefficients formula: Model formula intercept: Value intercept \\(\\beta_0\\)","code":"logreg_model <- mv_model_logreg(  coefficients = list(x = 0.5, z = 0.3),  formula = event ~ x + z,  intercept = 1.2 )"},{"path":"/index.html","id":"calculate-the-results","dir":"","previous_headings":"Example","what":"Calculate the results","title":"Tools for external validation in Multiple Imputation by Chained Equations methodology","text":"external validation results summarized calibration plots c-index foresplot, generate plots needed previously calculate model predictions external validation cohort. can calculate model predictions using calculate_predictions, calculate_predictions_recalibrated_type_1 calculate_predictions_recalibrated_type_2 functions. Suppose want calculate model predictions external validation cohort, use function calculate_predictions follows. working magrittr package possible rewrite code follows function %<>% pipes assign result value model calculate recalibrated predictions needed previously calculated model predictions. know far away model estimating observed risk obviously need know model predictions. can calculate type 1 recalibrated predictions model. can concatenate prediction functions using pipe operator %>% |> Harrell C-index calculation can done function calculate_c_index. also needs model predictions without recalibration calculated.","code":"model <- model %>% calculate_predictions(external_validation_data) model %<>% calculate_predictions(external_validation_data) model %<>% calculate_predictions_recalibrated_type_1(external_validation_data) model %<>%  calculate_predictions(external_validation_data) %>%  calculate_predictions_recalibrated_type_1(external_validation_data) %>%  calculate_predictions_recalibrated_type_2(external_validation_data) model %<>% calculate_c_index(external_validation_data)"},{"path":"/index.html","id":"visualizing-the-results","dir":"","previous_headings":"Example","what":"Visualizing the results","title":"Tools for external validation in Multiple Imputation by Chained Equations methodology","text":"results generated model can start generate plots visualize . shown next graph last step package pipeline visualize results. package two plots defined. calibration plots shows predictions matched observed risk c-index foresplot shows discrimination abilities different models.","code":""},{"path":"/index.html","id":"calibration-plots","dir":"","previous_headings":"Example > Visualizing the results","what":"Calibration plots","title":"Tools for external validation in Multiple Imputation by Chained Equations methodology","text":"obtain calibration plots need use two functions get_calibration_plot_data generates needed data actually generate calibration plot get_calibration_plot whose needed parameter outcome get_calibration_plot_data. can generate calibration plot shown next code snippet function get_calibration_plot. function returns ggplot2 object can styled default plot package. argument type can used generate calibration plots recalibrated predictions. next code snippet generate calibration plot type 1 recalibrated predictions","code":"model %>%   get_calibration_plot_data(     data = external_validation_data,      n_groups = 10,      type = \"predictions_aggregated\"   ) %>%   get_calibration_plot() model %>%  get_calibration_plot_data(    data = external_validation_data,     n_groups = 10,     type = \"predictions_recal_type_1\"  ) %>%  get_calibration_plot()"},{"path":"/index.html","id":"c-index-forestplot","dir":"","previous_headings":"Example > Visualizing the results","what":"C-index forestplot","title":"Tools for external validation in Multiple Imputation by Chained Equations methodology","text":"external validations normally formed many models want compare results. Forestplots great way visualizing c-index values multiple models one graph. package provides function get_c_index_forestplot. can provide illimited number models c_index calculated returns forestplot generated forestplot package.","code":"get_c_index_forestplot(Cox = cox_model, `Logistic Regression`= logreg_model)"},{"path":"/reference/calculate_c_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Harrell C-Index for a model — calculate_c_index","title":"Calculates Harrell C-Index for a model — calculate_c_index","text":"function calculates Harrell C Index value model imputed dataset stored data long dataset. Harrell's C Index calculation realized using Hmisc::rcorr.cens function Harrell's package Hmisc. calculating index imputed dataset aggregates using rubin rules psfmi::pool_RR function Heymans' package psfmi. Finally, stores result inside c_index attribute model.","code":""},{"path":"/reference/calculate_c_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Harrell C-Index for a model — calculate_c_index","text":"","code":"calculate_c_index(model, data, .progress = FALSE)"},{"path":"/reference/calculate_c_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Harrell C-Index for a model — calculate_c_index","text":"model model generated function mv_model_cox() mv_model_logreg() data Multiple imputation data organized long dataset .progress TRUE render progress bar FALSE otherwise","code":""},{"path":"/reference/calculate_c_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Harrell C-Index for a model — calculate_c_index","text":"model passed parameter Harrell C Index value stored $c_index","code":""},{"path":"/reference/calculate_c_index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates Harrell C-Index for a model — calculate_c_index","text":"F. E. Harrell, “Harrell Miscellaneous (R package Hmisc version 5.1-1),” R-project.org, Sep. 2023, doi: https://cran.r-project.org/package=Hmisc. M. Heymans, “Prediction Model Pooling, Selection Performance Evaluation Across Multiply Imputed Datasets (R package psfmi version 1.4.0),” R-project.org, Jun. 2023, doi: https://cran.r-project.org/package=psfmi.","code":""},{"path":"/reference/calculate_c_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Harrell C-Index for a model — calculate_c_index","text":"","code":"set.seed(123)  model <- mv_model_logreg(   coefficients = list(x = 0.5, z = 0.3),   formula = event ~ x + z,   intercept = 1.2 )  data <- data.frame(   .imp = c(1,1,1,2,2,2,3,3,3),   id = c(1,2,3,1,2,3,1,2,3),   x = rnorm(9, 1, 0.25),   z = rnorm(9, 2, 0.75),   status = c(1,0,0,1,0,0,1,0,0),   time = c(2,3,5,2,3,5,2,3,5) ) data$event <- survival::Surv(data$time, data$status)   model <- model |>   calculate_predictions(data) |>   calculate_c_index(data) #> Warning: NaNs produced #> Warning: NaNs produced"},{"path":"/reference/calculate_predictions.cox.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the predictions for a Cox model — calculate_predictions.cox","title":"Calculates the predictions for a Cox model — calculate_predictions.cox","text":"Calculates predictions given Cox model external validation data. predictions calculated following definition cox model $$S_0(t)^{e^{(\\beta \\cdot X)}}$$ \\(S_0(t)\\) stands survival function time \\(t\\), \\(\\beta\\) stands model coefficients \\(X\\) stands centered values id.","code":""},{"path":"/reference/calculate_predictions.cox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the predictions for a Cox model — calculate_predictions.cox","text":"","code":"# S3 method for class 'cox' calculate_predictions(model, data)"},{"path":"/reference/calculate_predictions.cox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the predictions for a Cox model — calculate_predictions.cox","text":"model Model generated mv_model_cox() data External validation data. Multiple imputation dataset long format.","code":""},{"path":"/reference/calculate_predictions.cox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the predictions for a Cox model — calculate_predictions.cox","text":"model parameters predictions_aggregated, predictions_data, betax betax_data populated. predictions_aggregated, stores predictions aggregated mean. predictions_data, stores predictions imputed datasets. betax, stores \\(\\beta \\cdot X\\) values aggregated mean. betax_data, stores \\(\\beta \\cdot X\\) values imputed datasets.","code":""},{"path":"/reference/calculate_predictions.cox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the predictions for a Cox model — calculate_predictions.cox","text":"","code":"set.seed(123)  model <- mv_model_cox(   coefficients = list(x = 0.5, z = 0.3),   means = list(x = 1, z = 2),   formula = event ~ x + z,   S0 = 0.98765 )  data <- data.frame(   .imp = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   id = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   x = rnorm(9, 1, 0.25),   z = rnorm(9, 2, 0.75) )"},{"path":"/reference/calculate_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the predictions for a model — calculate_predictions","title":"Calculate the predictions for a model — calculate_predictions","text":"generic method calculating predictions given model. parameters must passed S3 methods class (calculate_predictions.cox() calculate_predictions.logreg())","code":""},{"path":"/reference/calculate_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the predictions for a model — calculate_predictions","text":"","code":"calculate_predictions(model, data)"},{"path":"/reference/calculate_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the predictions for a model — calculate_predictions","text":"model model generated function mv_model_cox() mv_model_logreg() data Data parameter calculate_predictions.cox() calculate_predictions.logreg()","code":""},{"path":"/reference/calculate_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the predictions for a model — calculate_predictions","text":"model parameters predictions_aggregated, predictions_data, betax betax_data populated.","code":""},{"path":"/reference/calculate_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the predictions for a model — calculate_predictions","text":"","code":"set.seed(123)  model <- mv_model_logreg(   coefficients = list(x = 0.5, z = 0.3),   formula = event ~ x + z,   intercept = 1.2 )  data <- data.frame(   .imp = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   id = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   x = rnorm(9, 1, 0.25),   z = rnorm(9, 2, 0.75) )   model |>   calculate_predictions(data) #> $coefficients #> $coefficients$x #> [1] 0.5 #>  #> $coefficients$z #> [1] 0.3 #>  #>  #> $formula #> event ~ x + z #> <environment: 0x000002b5e950f1f8> #>  #> $intercept #> [1] 1.2 #>  #> $alpha_type_1 #> NULL #>  #> $alpha_type_2 #> NULL #>  #> $beta_overall #> NULL #>  #> $predictions_aggregated #> # A tibble: 3 × 2 #>      id prediction #>   <dbl>      <dbl> #> 1     1      0.917 #> 2     2      0.915 #> 3     3      0.900 #>  #> $predictions_data #> # A tibble: 9 × 3 #>   prediction  .imp    id #>        <dbl> <dbl> <dbl> #> 1      0.894     1     1 #> 2      0.927     1     2 #> 3      0.929     1     3 #> 4      0.917     2     1 #> 5      0.912     2     2 #> 6      0.916     2     3 #> 7      0.940     3     1 #> 8      0.905     3     2 #> 9      0.855     3     3 #>  #> $betax #> # A tibble: 3 × 2 #>      id betax #>   <dbl> <dbl> #> 1     1  2.43 #> 2     2  2.38 #> 3     3  2.25 #>  #> $betax_data #> # A tibble: 9 × 3 #>   betax  .imp    id #>   <dbl> <dbl> <dbl> #> 1  2.13     1     1 #> 2  2.55     1     2 #> 3  2.58     1     3 #> 4  2.40     2     1 #> 5  2.34     2     2 #> 6  2.39     2     3 #> 7  2.76     3     1 #> 8  2.25     3     2 #> 9  1.77     3     3 #>  #> $predictions_recal_type_1 #> NULL #>  #> $predictions_recal_type_2 #> NULL #>  #> $c_index #> NULL #>  #> attr(,\"class\") #> [1] \"MiceExtVal\" \"logreg\""},{"path":"/reference/calculate_predictions.logreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the predictions for a logistic regression model — calculate_predictions.logreg","title":"Calculates the predictions for a logistic regression model — calculate_predictions.logreg","text":"Calculates predictions given logistic regression model external validation data. predictions logistic regression model calculated following next formula. $$p(X) = \\frac{1}{1 + e^{-(\\beta \\cdot X)}}$$ \\(X\\) stands covariable values \\(\\beta\\) coefficient values.","code":""},{"path":"/reference/calculate_predictions.logreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the predictions for a logistic regression model — calculate_predictions.logreg","text":"","code":"# S3 method for class 'logreg' calculate_predictions(model, data)"},{"path":"/reference/calculate_predictions.logreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the predictions for a logistic regression model — calculate_predictions.logreg","text":"model Model generated mv_model_logreg() data External validation data. Multiple imputation dataset long format.","code":""},{"path":"/reference/calculate_predictions.logreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the predictions for a logistic regression model — calculate_predictions.logreg","text":"model parameters predictions_aggregated, predictions_data, betax betax_data populated. predictions_aggregated, stores predictions aggregated mean. predictions_data, stores predictions imputed datasets. betax, stores \\(\\beta \\cdot X\\) values aggregated mean. betax_data, stores \\(\\beta \\cdot X\\) values imputed datasets.","code":""},{"path":"/reference/calculate_predictions.logreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the predictions for a logistic regression model — calculate_predictions.logreg","text":"","code":"set.seed(123)  model <- mv_model_logreg(   coefficients = list(x = 0.5, z = 0.3),   formula = event ~ x + z,   intercept = 1.2 )  data <- data.frame(   .imp = c(1,1,1,2,2,2,3,3,3),   id = c(1,2,3,1,2,3,1,2,3),   x = rnorm(9, 1, 0.25),   z = rnorm(9, 2, 0.75) )   model |>   calculate_predictions(data) #> $coefficients #> $coefficients$x #> [1] 0.5 #>  #> $coefficients$z #> [1] 0.3 #>  #>  #> $formula #> event ~ x + z #> <environment: 0x000002b5efa6ce00> #>  #> $intercept #> [1] 1.2 #>  #> $alpha_type_1 #> NULL #>  #> $alpha_type_2 #> NULL #>  #> $beta_overall #> NULL #>  #> $predictions_aggregated #> # A tibble: 3 × 2 #>      id prediction #>   <dbl>      <dbl> #> 1     1      0.917 #> 2     2      0.915 #> 3     3      0.900 #>  #> $predictions_data #> # A tibble: 9 × 3 #>   prediction  .imp    id #>        <dbl> <dbl> <dbl> #> 1      0.894     1     1 #> 2      0.927     1     2 #> 3      0.929     1     3 #> 4      0.917     2     1 #> 5      0.912     2     2 #> 6      0.916     2     3 #> 7      0.940     3     1 #> 8      0.905     3     2 #> 9      0.855     3     3 #>  #> $betax #> # A tibble: 3 × 2 #>      id betax #>   <dbl> <dbl> #> 1     1  2.43 #> 2     2  2.38 #> 3     3  2.25 #>  #> $betax_data #> # A tibble: 9 × 3 #>   betax  .imp    id #>   <dbl> <dbl> <dbl> #> 1  2.13     1     1 #> 2  2.55     1     2 #> 3  2.58     1     3 #> 4  2.40     2     1 #> 5  2.34     2     2 #> 6  2.39     2     3 #> 7  2.76     3     1 #> 8  2.25     3     2 #> 9  1.77     3     3 #>  #> $predictions_recal_type_1 #> NULL #>  #> $predictions_recal_type_2 #> NULL #>  #> $c_index #> NULL #>  #> attr(,\"class\") #> [1] \"MiceExtVal\" \"logreg\""},{"path":"/reference/calculate_predictions_recalibrated_type_1.cox.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the type 1 recalibrated predictions — calculate_predictions_recalibrated_type_1.cox","title":"Calculates the type 1 recalibrated predictions — calculate_predictions_recalibrated_type_1.cox","text":"Using function get_recalibrate_params_type_1 calculates recalibration parameters imputed datasets stored data. parameters estimated aggregates calculates recalibrated predictions aggregated parameters aggregated predictions.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_1.cox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the type 1 recalibrated predictions — calculate_predictions_recalibrated_type_1.cox","text":"","code":"# S3 method for class 'cox' calculate_predictions_recalibrated_type_1(model, data, .progress = FALSE)"},{"path":"/reference/calculate_predictions_recalibrated_type_1.cox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the type 1 recalibrated predictions — calculate_predictions_recalibrated_type_1.cox","text":"model Model generated mv_model_cox(). Needs predictions parameter model, generate function calculate_predictions() must executed model. data External validation data. Multiple imputation dataset long format. .progress TRUE render progress bar FALSE otherwise.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_1.cox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the type 1 recalibrated predictions — calculate_predictions_recalibrated_type_1.cox","text":"model parameter predictions_recal_type_1 alpha populated. predictions_recal_type_1: stores type 1 recalibrated predictions stored follows alpha: stores \\(\\alpha\\) recalibration parameter.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_1.cox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the type 1 recalibrated predictions — calculate_predictions_recalibrated_type_1.cox","text":"","code":"set.seed(123)  model <- mv_model_cox(   coefficients = list(x = 0.5, z = 0.3),   means = list(x = 1, z = 2),   formula = event ~ x + z,   S0 = 0.98765 )  data <- data.frame(   .imp = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   id = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   x = rnorm(9, 1, 0.25),   z = rnorm(9, 2, 0.75),   status = c(1, 0, 0, 1, 0, 0, 1, 0, 0),   time = c(2, 3, 5, 2, 3, 5, 2, 3, 5) ) data$event <- survival::Surv(data$time, data$status)  model |>   calculate_predictions(data) |>   calculate_predictions_recalibrated_type_1(data) #> $coefficients #> $coefficients$x #> [1] 0.5 #>  #> $coefficients$z #> [1] 0.3 #>  #>  #> $means #> $means$x #> [1] 1 #>  #> $means$z #> [1] 2 #>  #>  #> $formula #> event ~ x + z #> <environment: 0x000002b5f0b9b9a0> #>  #> $S0 #> [1] 0.98765 #>  #> $alpha #> [1] -2.363584 #>  #> $S0_type_2 #> NULL #>  #> $beta_overall #> NULL #>  #> $predictions_aggregated #> # A tibble: 3 × 2 #>      id prediction #>   <dbl>      <dbl> #> 1     1     0.0145 #> 2     2     0.0135 #> 3     3     0.0123 #>  #> $predictions_data #> # A tibble: 9 × 3 #>   prediction  .imp    id #>        <dbl> <dbl> <dbl> #> 1    0.0104      1     1 #> 2    0.0158      1     2 #> 3    0.0162      1     3 #> 4    0.0136      2     1 #> 5    0.0129      2     2 #> 6    0.0135      2     3 #> 7    0.0195      3     1 #> 8    0.0118      3     2 #> 9    0.00730     3     3 #>  #> $betax #> # A tibble: 3 × 2 #>      id   betax #>   <dbl>   <dbl> #> 1     1  0.129  #> 2     2  0.0805 #> 3     3 -0.0544 #>  #> $betax_data #> # A tibble: 9 × 3 #>     betax  .imp    id #>     <dbl> <dbl> <dbl> #> 1 -0.170      1     1 #> 2  0.247      1     2 #> 3  0.276      1     3 #> 4  0.0990     2     1 #> 5  0.0411     2     2 #> 6  0.0893     2     3 #> 7  0.460      3     1 #> 8 -0.0461     3     2 #> 9 -0.528      3     3 #>  #> $predictions_recal_type_1 #> # A tibble: 3 × 2 #>      id prediction_type_1 #>   <dbl>             <dbl> #> 1     1           0.00137 #> 2     2           0.00128 #> 3     3           0.00117 #>  #> $predictions_recal_type_2 #> NULL #>  #> $c_index #> NULL #>  #> attr(,\"class\") #> [1] \"MiceExtVal\" \"cox\""},{"path":"/reference/calculate_predictions_recalibrated_type_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the type 1 recalibration predictions for a model. — calculate_predictions_recalibrated_type_1","title":"Calculates the type 1 recalibration predictions for a model. — calculate_predictions_recalibrated_type_1","text":"generic method calculating type 1 recalibration predictions model.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the type 1 recalibration predictions for a model. — calculate_predictions_recalibrated_type_1","text":"","code":"calculate_predictions_recalibrated_type_1(model, data, .progress = FALSE)"},{"path":"/reference/calculate_predictions_recalibrated_type_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the type 1 recalibration predictions for a model. — calculate_predictions_recalibrated_type_1","text":"model Model recalibrated predictions calculated data Data parameter calculate_predictions_recalibrated_type_1.cox() function calculate_predictions_recalibrated_type_1.logreg() function. .progress .progress parameter calculate_predictions_recalibrated_type_1.cox() function calculate_predictions_recalibrated_type_1.logreg() function.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the type 1 recalibration predictions for a model. — calculate_predictions_recalibrated_type_1","text":"model parameter predictions_recal_type_1 also recalibration parameters populated.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the type 1 recalibration predictions for a model. — calculate_predictions_recalibrated_type_1","text":"","code":"set.seed(123)  model <- mv_model_logreg(   coefficients = list(x = 0.5, z = 0.3),   formula = event ~ x + z,   intercept = 1.2 )  data <- data.frame(   .imp = c(1,1,1,2,2,2,3,3,3),   id = c(1,2,3,1,2,3,1,2,3),   x = rnorm(9, 1, 0.25),   z = rnorm(9, 2, 0.75),   status = c(1,0,0,1,0,0,1,0,0),   time = c(2,3,5,2,3,5,2,3,5) ) data$event <- survival::Surv(data$time, data$status)  model |>   calculate_predictions(data) |>   calculate_predictions_recalibrated_type_1(data) #> $coefficients #> $coefficients$x #> [1] 0.5 #>  #> $coefficients$z #> [1] 0.3 #>  #>  #> $formula #> event ~ x + z #> <environment: 0x000002b5ede335b0> #>  #> $intercept #> [1] 1.2 #>  #> $alpha_type_1 #> [1] -3.056435 #>  #> $alpha_type_2 #> NULL #>  #> $beta_overall #> NULL #>  #> $predictions_aggregated #> # A tibble: 3 × 2 #>      id prediction #>   <dbl>      <dbl> #> 1     1      0.917 #> 2     2      0.915 #> 3     3      0.900 #>  #> $predictions_data #> # A tibble: 9 × 3 #>   prediction  .imp    id #>        <dbl> <dbl> <dbl> #> 1      0.894     1     1 #> 2      0.927     1     2 #> 3      0.929     1     3 #> 4      0.917     2     1 #> 5      0.912     2     2 #> 6      0.916     2     3 #> 7      0.940     3     1 #> 8      0.905     3     2 #> 9      0.855     3     3 #>  #> $betax #> # A tibble: 3 × 2 #>      id betax #>   <dbl> <dbl> #> 1     1  2.43 #> 2     2  2.38 #> 3     3  2.25 #>  #> $betax_data #> # A tibble: 9 × 3 #>   betax  .imp    id #>   <dbl> <dbl> <dbl> #> 1  2.13     1     1 #> 2  2.55     1     2 #> 3  2.58     1     3 #> 4  2.40     2     1 #> 5  2.34     2     2 #> 6  2.39     2     3 #> 7  2.76     3     1 #> 8  2.25     3     2 #> 9  1.77     3     3 #>  #> $predictions_recal_type_1 #> # A tibble: 3 × 2 #>      id prediction_type_1 #>   <dbl>             <dbl> #> 1     1             0.348 #> 2     2             0.337 #> 3     3             0.308 #>  #> $predictions_recal_type_2 #> NULL #>  #> $c_index #> NULL #>  #> attr(,\"class\") #> [1] \"MiceExtVal\" \"logreg\""},{"path":"/reference/calculate_predictions_recalibrated_type_1.logreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the type 1 recalibrated predictions for a logistic regression model. — calculate_predictions_recalibrated_type_1.logreg","title":"Calculates the type 1 recalibrated predictions for a logistic regression model. — calculate_predictions_recalibrated_type_1.logreg","text":"Calculates type 1 recalibrated predictions logistic regression model. type 1 recalibration defined \\(\\alpha\\) parameter updates value intercept (\\(\\beta_0\\)) model. log-odds function rewritten follows. $$log(\\frac{p}{1 - p}) = \\alpha + \\beta_0 + \\beta_1 \\cdot X_1 + \\beta_2 \\cdot X_2 + \\dots + \\beta_p \\cdot X_p$$ Thus, predictions updated adjusting intercept value model external validation data. \\(\\alpha\\) parameter estimated imputed datasets deriving logistic regression model using model log-odds offset. coefficients models aggregated using mean. Using aggregated parameter aggregated log-odds new predictions calculated follows. $$\\frac{1}{1 + e^{(-(\\alpha + (\\beta \\cdot X)))}}$$","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_1.logreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the type 1 recalibrated predictions for a logistic regression model. — calculate_predictions_recalibrated_type_1.logreg","text":"","code":"# S3 method for class 'logreg' calculate_predictions_recalibrated_type_1(model, data, .progress = FALSE)"},{"path":"/reference/calculate_predictions_recalibrated_type_1.logreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the type 1 recalibrated predictions for a logistic regression model. — calculate_predictions_recalibrated_type_1.logreg","text":"model Model generated mv_model_logreg(). Needs predictions parameter model, generate function calculate_predictions must executed model. attribute must generated using calculate_predictions() data Data predictions must recalibrated. .progress TRUE render progress bar, FALSE otherwise.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_1.logreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the type 1 recalibrated predictions for a logistic regression model. — calculate_predictions_recalibrated_type_1.logreg","text":"model parameters predictions_recal_type_1 alpha_type_1 populated. predictions_recal_type_1: stores type 1 recalibrated predictions follows alpha_type_1: stores \\(\\alpha\\) recalibration parameter.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_1.logreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the type 1 recalibrated predictions for a logistic regression model. — calculate_predictions_recalibrated_type_1.logreg","text":"","code":"set.seed(123)  model <- mv_model_logreg(   coefficients = list(x = 0.5, z = 0.3),   formula = event ~ x + z,   intercept = 1.2 )  data <- data.frame(   .imp = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   id = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   x = rnorm(9, 1, 0.25),   z = rnorm(9, 2, 0.75),   status = c(1, 0, 0, 1, 0, 0, 1, 0, 0),   time = c(2, 3, 5, 2, 3, 5, 2, 3, 5) ) data$event <- survival::Surv(data$time, data$status)  model |>   calculate_predictions(data) |>   calculate_predictions_recalibrated_type_1(data) #> $coefficients #> $coefficients$x #> [1] 0.5 #>  #> $coefficients$z #> [1] 0.3 #>  #>  #> $formula #> event ~ x + z #> <environment: 0x000002b5ef9a9620> #>  #> $intercept #> [1] 1.2 #>  #> $alpha_type_1 #> [1] -3.056435 #>  #> $alpha_type_2 #> NULL #>  #> $beta_overall #> NULL #>  #> $predictions_aggregated #> # A tibble: 3 × 2 #>      id prediction #>   <dbl>      <dbl> #> 1     1      0.917 #> 2     2      0.915 #> 3     3      0.900 #>  #> $predictions_data #> # A tibble: 9 × 3 #>   prediction  .imp    id #>        <dbl> <dbl> <dbl> #> 1      0.894     1     1 #> 2      0.927     1     2 #> 3      0.929     1     3 #> 4      0.917     2     1 #> 5      0.912     2     2 #> 6      0.916     2     3 #> 7      0.940     3     1 #> 8      0.905     3     2 #> 9      0.855     3     3 #>  #> $betax #> # A tibble: 3 × 2 #>      id betax #>   <dbl> <dbl> #> 1     1  2.43 #> 2     2  2.38 #> 3     3  2.25 #>  #> $betax_data #> # A tibble: 9 × 3 #>   betax  .imp    id #>   <dbl> <dbl> <dbl> #> 1  2.13     1     1 #> 2  2.55     1     2 #> 3  2.58     1     3 #> 4  2.40     2     1 #> 5  2.34     2     2 #> 6  2.39     2     3 #> 7  2.76     3     1 #> 8  2.25     3     2 #> 9  1.77     3     3 #>  #> $predictions_recal_type_1 #> # A tibble: 3 × 2 #>      id prediction_type_1 #>   <dbl>             <dbl> #> 1     1             0.348 #> 2     2             0.337 #> 3     3             0.308 #>  #> $predictions_recal_type_2 #> NULL #>  #> $c_index #> NULL #>  #> attr(,\"class\") #> [1] \"MiceExtVal\" \"logreg\""},{"path":"/reference/calculate_predictions_recalibrated_type_2.cox.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the type 2 recalibrated predictions for a Cox model — calculate_predictions_recalibrated_type_2.cox","title":"Calculates the type 2 recalibrated predictions for a Cox model — calculate_predictions_recalibrated_type_2.cox","text":"function calculates type 2 recalibrated predictions Cox model. help recalibration model function get_recalibrate_params_type_2_cox() defined elsewhere package. Using auxiliar function recalibration parameters calculated imputed datasets stored data long dataset. estimating recalibration parameters imputed datasets aggregated mean use recalibrate predictions model. type 2 recalibration needs two parameters S0_type_2 beta_overall. parameters calculated get_recalibrate_params_type_2_cox() function. estimated, aggregated mean. Finally type 2 recalibration parameters aggregated predictions type 2 recalibrated predictions calculated. $$S_{0, \\text{type 2}}(t)^{exp(\\beta_{overall}(\\beta \\cdot X))}$$ \\(S_{0, \\text{type 2}}(t)\\) estimated using Weibull distribution \\(\\beta_{overall}\\) estimated deriving Cox model \\(\\beta \\cdot X\\) unique covariate. parameters estimated using get_recalibrate_params_type_2_cox() function.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_2.cox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the type 2 recalibrated predictions for a Cox model — calculate_predictions_recalibrated_type_2.cox","text":"","code":"# S3 method for class 'cox' calculate_predictions_recalibrated_type_2(model, data, .progress = FALSE)"},{"path":"/reference/calculate_predictions_recalibrated_type_2.cox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the type 2 recalibrated predictions for a Cox model — calculate_predictions_recalibrated_type_2.cox","text":"model Model generated mv_model_cox(). Needs predictions parameter model, generate function calculate_predictions() must executed model. data External validation data. Multiple imputation dataset long format. .progress TRUE render progress bar FALSE otherwise.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_2.cox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the type 2 recalibrated predictions for a Cox model — calculate_predictions_recalibrated_type_2.cox","text":"model parameter predictons_recalibrated_type_2, S0_type_2 beta_overall populated. predictions_recal_type_2: stores type 2 recalibrated predictions follows. S0_type_2: stores \\(S_{0, \\text{type 2}}(t)\\) type 2 recalibration parameter. beta_overall: stores \\(\\beta_{overall}\\) type 2 recalibration parameter.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_2.cox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the type 2 recalibrated predictions for a Cox model — calculate_predictions_recalibrated_type_2.cox","text":"","code":"set.seed(123)  model <- mv_model_cox(   coefficients = list(x = 0.5, z = 0.3),   means = list(x = 1, z = 2),   formula = event ~ x + z,   S0 = 0.98765 )  data <- data.frame(   .imp = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   id = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   x = rnorm(9, 1, 0.25),   z = rnorm(9, 2, 0.75),   status = c(1, 0, 0, 1, 0, 0, 1, 0, 0),   time = c(2, 3, 5, 2, 3, 5, 2, 3, 5) ) data$event <- survival::Surv(data$time, data$status)  model |>   calculate_predictions(data) |>   calculate_predictions_recalibrated_type_1(data) |>   calculate_predictions_recalibrated_type_2(data) #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> $coefficients #> $coefficients$x #> [1] 0.5 #>  #> $coefficients$z #> [1] 0.3 #>  #>  #> $means #> $means$x #> [1] 1 #>  #> $means$z #> [1] 2 #>  #>  #> $formula #> event ~ x + z #> <environment: 0x000002b5e671a270> #>  #> $S0 #> [1] 0.98765 #>  #> $alpha #> [1] -2.363584 #>  #> $S0_type_2 #> [1] 0.9999999 #>  #> $beta_overall #> [1] 642.0023 #>  #> $predictions_aggregated #> # A tibble: 3 × 2 #>      id prediction #>   <dbl>      <dbl> #> 1     1     0.0145 #> 2     2     0.0135 #> 3     3     0.0123 #>  #> $predictions_data #> # A tibble: 9 × 3 #>   prediction  .imp    id #>        <dbl> <dbl> <dbl> #> 1    0.0104      1     1 #> 2    0.0158      1     2 #> 3    0.0162      1     3 #> 4    0.0136      2     1 #> 5    0.0129      2     2 #> 6    0.0135      2     3 #> 7    0.0195      3     1 #> 8    0.0118      3     2 #> 9    0.00730     3     3 #>  #> $betax #> # A tibble: 3 × 2 #>      id   betax #>   <dbl>   <dbl> #> 1     1  0.129  #> 2     2  0.0805 #> 3     3 -0.0544 #>  #> $betax_data #> # A tibble: 9 × 3 #>     betax  .imp    id #>     <dbl> <dbl> <dbl> #> 1 -0.170      1     1 #> 2  0.247      1     2 #> 3  0.276      1     3 #> 4  0.0990     2     1 #> 5  0.0411     2     2 #> 6  0.0893     2     3 #> 7  0.460      3     1 #> 8 -0.0461     3     2 #> 9 -0.528      3     3 #>  #> $predictions_recal_type_1 #> # A tibble: 3 × 2 #>      id prediction_type_1 #>   <dbl>             <dbl> #> 1     1           0.00137 #> 2     2           0.00128 #> 3     3           0.00117 #>  #> $predictions_recal_type_2 #> # A tibble: 3 × 2 #>      id prediction_type_2 #>   <dbl>             <dbl> #> 1     1                 1 #> 2     2                 1 #> 3     3                 0 #>  #> $c_index #> NULL #>  #> attr(,\"class\") #> [1] \"MiceExtVal\" \"cox\""},{"path":"/reference/calculate_predictions_recalibrated_type_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the type 2 recalibration predictions for a model. — calculate_predictions_recalibrated_type_2","title":"Calculates the type 2 recalibration predictions for a model. — calculate_predictions_recalibrated_type_2","text":"generic method calculating type 2 recalibration predictions given model.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the type 2 recalibration predictions for a model. — calculate_predictions_recalibrated_type_2","text":"","code":"calculate_predictions_recalibrated_type_2(model, data, .progress = FALSE)"},{"path":"/reference/calculate_predictions_recalibrated_type_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the type 2 recalibration predictions for a model. — calculate_predictions_recalibrated_type_2","text":"model Model recalibrated predictions calculated data Data parameter calculate_predictions_recalibrated_type_2.cox() function calculate_predictions_recalibrated_type_2.logreg() function .progress .progress parameter calculate_predictions_recalibrated_type_2.cox() function calculate_predictions_recalibrated_type_2.logreg() function","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the type 2 recalibration predictions for a model. — calculate_predictions_recalibrated_type_2","text":"model parameter predictions_recal_type_2 also recalibration parameters populated.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the type 2 recalibration predictions for a model. — calculate_predictions_recalibrated_type_2","text":"","code":"set.seed(123)  model <- mv_model_logreg(   coefficients = list(x = 0.5, z = 0.3),   formula = event ~ x + z,   intercept = 1.2 )  data <- data.frame(   .imp = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   id = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   x = rnorm(9, 1, 0.25),   z = rnorm(9, 2, 0.75),   status = c(1, 0, 0, 1, 0, 0, 1, 0, 0),   time = c(2, 3, 5, 2, 3, 5, 2, 3, 5) ) data$event <- survival::Surv(data$time, data$status)  model |>   calculate_predictions(data) |>   calculate_predictions_recalibrated_type_1(data) |>   calculate_predictions_recalibrated_type_2(data) #> $coefficients #> $coefficients$x #> [1] 0.5 #>  #> $coefficients$z #> [1] 0.3 #>  #>  #> $formula #> event ~ x + z #> <environment: 0x000002b5f1618900> #>  #> $intercept #> [1] 1.2 #>  #> $alpha_type_1 #> [1] -3.056435 #>  #> $alpha_type_2 #> [1] -1236.308 #>  #> $beta_overall #> [1] 515.763 #>  #> $predictions_aggregated #> # A tibble: 3 × 2 #>      id prediction #>   <dbl>      <dbl> #> 1     1      0.917 #> 2     2      0.915 #> 3     3      0.900 #>  #> $predictions_data #> # A tibble: 9 × 3 #>   prediction  .imp    id #>        <dbl> <dbl> <dbl> #> 1      0.894     1     1 #> 2      0.927     1     2 #> 3      0.929     1     3 #> 4      0.917     2     1 #> 5      0.912     2     2 #> 6      0.916     2     3 #> 7      0.940     3     1 #> 8      0.905     3     2 #> 9      0.855     3     3 #>  #> $betax #> # A tibble: 3 × 2 #>      id betax #>   <dbl> <dbl> #> 1     1  2.43 #> 2     2  2.38 #> 3     3  2.25 #>  #> $betax_data #> # A tibble: 9 × 3 #>   betax  .imp    id #>   <dbl> <dbl> <dbl> #> 1  2.13     1     1 #> 2  2.55     1     2 #> 3  2.58     1     3 #> 4  2.40     2     1 #> 5  2.34     2     2 #> 6  2.39     2     3 #> 7  2.76     3     1 #> 8  2.25     3     2 #> 9  1.77     3     3 #>  #> $predictions_recal_type_1 #> # A tibble: 3 × 2 #>      id prediction_type_1 #>   <dbl>             <dbl> #> 1     1             0.348 #> 2     2             0.337 #> 3     3             0.308 #>  #> $predictions_recal_type_2 #> # A tibble: 3 × 2 #>      id prediction_type_2 #>   <dbl>             <dbl> #> 1     1          1.00e+ 0 #> 2     2          2.00e- 4 #> 3     3          1.19e-34 #>  #> $c_index #> NULL #>  #> attr(,\"class\") #> [1] \"MiceExtVal\" \"logreg\""},{"path":"/reference/calculate_predictions_recalibrated_type_2.logreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the type 2 recalibrated predictions for a logistic regression model — calculate_predictions_recalibrated_type_2.logreg","title":"Calculates the type 2 recalibrated predictions for a logistic regression model — calculate_predictions_recalibrated_type_2.logreg","text":"Calculates type 2 recalibrated predictions logistic regression model. type 2 recalibration uses two parameters update model predictions, \\(\\alpha\\) parameter allow update model intercept \\(\\beta_{overall}\\) parameter allow update importance log-odds (\\(\\beta \\cdot X\\)) values. log-odds function can rewritten $$log(\\frac{p}{1 - p}) = \\alpha + \\beta_{overall} \\cdot (\\beta_0 + \\beta_1 \\cdot X_1 + \\beta_2 \\cdot X_2 + \\dots + \\beta_p \\cdot X_p)$$ parameters estimated deriving logistic regression model imputations using model log-odds covariate. coefficients model represent parameter estimations aggregated using rubin rules. , recalibrated predictions calculated using parameters aggregated log-odds. $$\\frac{1}{1 + e^{(-(\\alpha + \\beta_{overall}(\\beta \\cdot X)))}}$$","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_2.logreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the type 2 recalibrated predictions for a logistic regression model — calculate_predictions_recalibrated_type_2.logreg","text":"","code":"# S3 method for class 'logreg' calculate_predictions_recalibrated_type_2(model, data, .progress = FALSE)"},{"path":"/reference/calculate_predictions_recalibrated_type_2.logreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the type 2 recalibrated predictions for a logistic regression model — calculate_predictions_recalibrated_type_2.logreg","text":"model Model generated mv_model_logreg(). Needs predictions parameter model, generate function calculate_predictions() must executed model. data Data predictions must recalibrated. .progress TRUE render progress bar FALSE otherwise.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_2.logreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the type 2 recalibrated predictions for a logistic regression model — calculate_predictions_recalibrated_type_2.logreg","text":"model parameter predictons_recalibrated_type_2, S0_type_2 beta_overall populated. predictions_recal_type_2: stores type 2 recalibrated predictions follows. alpha_type_2: stores \\(\\alpha\\) type 2 recalibration parameter. beta_overall: stores \\(\\beta_{overall}\\) type 2 recalibration parameter.","code":""},{"path":"/reference/calculate_predictions_recalibrated_type_2.logreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the type 2 recalibrated predictions for a logistic regression model — calculate_predictions_recalibrated_type_2.logreg","text":"","code":"set.seed(123)  model <- mv_model_logreg(   coefficients = list(x = 0.5, z = 0.3),   formula = event ~ x + z,   intercept = 1.2 )  data <- data.frame(   .imp = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   id = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   x = rnorm(9, 1, 0.25),   z = rnorm(9, 2, 0.75),   status = c(1, 0, 0, 1, 0, 0, 1, 0, 0),   time = c(2, 3, 5, 2, 3, 5, 2, 3, 5) ) data$event <- survival::Surv(data$time, data$status)  model |>   calculate_predictions(data) |>   calculate_predictions_recalibrated_type_1(data) |>   calculate_predictions_recalibrated_type_2(data) #> $coefficients #> $coefficients$x #> [1] 0.5 #>  #> $coefficients$z #> [1] 0.3 #>  #>  #> $formula #> event ~ x + z #> <environment: 0x000002b5ef1bb7a8> #>  #> $intercept #> [1] 1.2 #>  #> $alpha_type_1 #> [1] -3.056435 #>  #> $alpha_type_2 #> [1] -1236.308 #>  #> $beta_overall #> [1] 515.763 #>  #> $predictions_aggregated #> # A tibble: 3 × 2 #>      id prediction #>   <dbl>      <dbl> #> 1     1      0.917 #> 2     2      0.915 #> 3     3      0.900 #>  #> $predictions_data #> # A tibble: 9 × 3 #>   prediction  .imp    id #>        <dbl> <dbl> <dbl> #> 1      0.894     1     1 #> 2      0.927     1     2 #> 3      0.929     1     3 #> 4      0.917     2     1 #> 5      0.912     2     2 #> 6      0.916     2     3 #> 7      0.940     3     1 #> 8      0.905     3     2 #> 9      0.855     3     3 #>  #> $betax #> # A tibble: 3 × 2 #>      id betax #>   <dbl> <dbl> #> 1     1  2.43 #> 2     2  2.38 #> 3     3  2.25 #>  #> $betax_data #> # A tibble: 9 × 3 #>   betax  .imp    id #>   <dbl> <dbl> <dbl> #> 1  2.13     1     1 #> 2  2.55     1     2 #> 3  2.58     1     3 #> 4  2.40     2     1 #> 5  2.34     2     2 #> 6  2.39     2     3 #> 7  2.76     3     1 #> 8  2.25     3     2 #> 9  1.77     3     3 #>  #> $predictions_recal_type_1 #> # A tibble: 3 × 2 #>      id prediction_type_1 #>   <dbl>             <dbl> #> 1     1             0.348 #> 2     2             0.337 #> 3     3             0.308 #>  #> $predictions_recal_type_2 #> # A tibble: 3 × 2 #>      id prediction_type_2 #>   <dbl>             <dbl> #> 1     1          1.00e+ 0 #> 2     2          2.00e- 4 #> 3     3          1.19e-34 #>  #> $c_index #> NULL #>  #> attr(,\"class\") #> [1] \"MiceExtVal\" \"logreg\""},{"path":"/reference/get_calibration_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates the calibration plot — get_calibration_plot","title":"Generates the calibration plot — get_calibration_plot","text":"Generates calibration plot data needed print . data generated get_calibration_plot_data() function.","code":""},{"path":"/reference/get_calibration_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates the calibration plot — get_calibration_plot","text":"","code":"get_calibration_plot(data)"},{"path":"/reference/get_calibration_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates the calibration plot — get_calibration_plot","text":"data Outcome get_calibration_plot_data() function.","code":""},{"path":"/reference/get_calibration_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates the calibration plot — get_calibration_plot","text":"ggplot2 object ready plotted","code":""},{"path":"/reference/get_calibration_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates the calibration plot — get_calibration_plot","text":"","code":"if (FALSE) { # \\dontrun{ model |>    get_calibration_plot_data(data, 10, type = \"predictions_aggregated\") |>    get_calibration_plot() } # }"},{"path":"/reference/get_calibration_plot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates the data needed for the calibration plot — get_calibration_plot_data","title":"Generates the data needed for the calibration plot — get_calibration_plot_data","text":"Generates data needed calibration plot. calibration plot needs separate model predictions risk groups. First function separates predictions n_groups computes mean value model predictions also observed value. observed value estimated value study time estimated using Kaplan-Meier estimator.","code":""},{"path":"/reference/get_calibration_plot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates the data needed for the calibration plot — get_calibration_plot_data","text":"","code":"get_calibration_plot_data(   model,   data,   n_groups,   type = \"predictions_aggregated\" )"},{"path":"/reference/get_calibration_plot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates the data needed for the calibration plot — get_calibration_plot_data","text":"model Model generated mv_model_cox() mv_model_logreg(). Needs predictions parameter model, generate function calculate_predictions() must executed model. want obtain also recalibrated data model must initalize recalibrated predictions calculate_predictions_recalibrated_type_1() calculate_predictions_recalibrated_type_2(). data Data observed predictions calculated. n_groups Number groups must calculated. type Type predictions calibration plot data generated : \"predictions_aggregated\", \"predictions_recal_type_1\" \"predictions_recal_type_2\"","code":""},{"path":"/reference/get_calibration_plot_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates the data needed for the calibration plot — get_calibration_plot_data","text":"tibble data ready generate calibration plot.","code":""},{"path":"/reference/get_calibration_plot_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates the data needed for the calibration plot — get_calibration_plot_data","text":"","code":"if (FALSE) { # \\dontrun{ model |>   get_calibration_plot_data(data = test_data, n_groups = 10, type = \"predictions_aggregated\") } # }"},{"path":"/reference/get_c_index_forestplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a forestplot to visualize C-Index of different models — get_c_index_forestplot","title":"Generates a forestplot to visualize C-Index of different models — get_c_index_forestplot","text":"list models passed parameters function extracts C-Index value generates forestplot compare results.","code":""},{"path":"/reference/get_c_index_forestplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a forestplot to visualize C-Index of different models — get_c_index_forestplot","text":"","code":"get_c_index_forestplot(...)"},{"path":"/reference/get_c_index_forestplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a forestplot to visualize C-Index of different models — get_c_index_forestplot","text":"... list models conform forestplot. passed variables, variable name assigned model name forestplot. , passed named arguments argument name used forestplot","code":""},{"path":"/reference/get_c_index_forestplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a forestplot to visualize C-Index of different models — get_c_index_forestplot","text":"forestplot C-Index data list models","code":""},{"path":"/reference/get_c_index_forestplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a forestplot to visualize C-Index of different models — get_c_index_forestplot","text":"","code":"if (FALSE) { # \\dontrun{ get_c_index_forestplot(A = model1, B = model2, C = model3, D = model4) get_c_index_forestplot(model1, model2, model3, model4) } # }"},{"path":"/reference/get_recalibrate_params_type_2_cox.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtains the \\(S_0(t)\\) and \\(\\beta_{overall}\\) parameters for recalibration — get_recalibrate_params_type_2_cox","title":"Obtains the \\(S_0(t)\\) and \\(\\beta_{overall}\\) parameters for recalibration — get_recalibrate_params_type_2_cox","text":"Calculates recalibration type 2 parameters recalibrate_data returns list two needed parameters \\(S_0(t)\\), survival estimation time \\(t\\) external validation data, \\(\\beta_{overall}\\), importance \\(\\beta \\cdot X\\) values external validation data. survival function estimation calculated Weibull distribution. Weibull model derived external validation cohort value estimated model time \\(t\\) used recalibration \\(S_0(t)\\). importance \\(\\beta \\cdot X\\) calculated deriving Cox model using covariate model \\(\\beta \\cdot X\\) values. derived Cox model coefficient used \\(\\beta_{overall}\\).","code":""},{"path":"/reference/get_recalibrate_params_type_2_cox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtains the \\(S_0(t)\\) and \\(\\beta_{overall}\\) parameters for recalibration — get_recalibrate_params_type_2_cox","text":"","code":"get_recalibrate_params_type_2_cox(time, event, betax)"},{"path":"/reference/get_recalibrate_params_type_2_cox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtains the \\(S_0(t)\\) and \\(\\beta_{overall}\\) parameters for recalibration — get_recalibrate_params_type_2_cox","text":"time time follow patient, must numeric event patient suffered event follow , must numeric \\(1\\) event \\(0\\) othercase betax betax values, \\(\\beta X\\), original predictions, must numeric","code":""},{"path":"/reference/get_recalibrate_params_type_2_cox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtains the \\(S_0(t)\\) and \\(\\beta_{overall}\\) parameters for recalibration — get_recalibrate_params_type_2_cox","text":"list two elements: S0: \\(S_0(t)\\) beta_overall: \\(\\beta_{overall}\\) value type 2 recalibration","code":""},{"path":"/reference/get_recalibrate_params_type_2_cox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtains the \\(S_0(t)\\) and \\(\\beta_{overall}\\) parameters for recalibration — get_recalibrate_params_type_2_cox","text":"","code":"if (FALSE) { # \\dontrun{ get_recalibrate_params_type_2_cox(data, betax, t) } # }"},{"path":"/reference/get_recalibrate_param_type_1_cox.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the \\(\\alpha\\) value for the recalibration. — get_recalibrate_param_type_1_cox","title":"Obtain the \\(\\alpha\\) value for the recalibration. — get_recalibrate_param_type_1_cox","text":"Obtains recalibration parameters following type 1 recalibration definition. Recalibrates predictions type 1 recalibration type 1 recalibration follows guidelines presented Crowson et al. (2016). recalibration follows next proposition obtain \\(\\alpha\\) parameter allow recalibrate predictions new validation dataset. recalibration adjusts incidence event known model new dataset. \\(\\alpha\\) value recalibration calculated difference survival basal function reported model mean value model predictions external validation cohort. $$\\alpha = S_{model}(t) - \\text{mean predictions}$$.","code":""},{"path":"/reference/get_recalibrate_param_type_1_cox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the \\(\\alpha\\) value for the recalibration. — get_recalibrate_param_type_1_cox","text":"","code":"get_recalibrate_param_type_1_cox(time, event, survival_predictions)"},{"path":"/reference/get_recalibrate_param_type_1_cox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the \\(\\alpha\\) value for the recalibration. — get_recalibrate_param_type_1_cox","text":"time time follow patient, must time event patient suffers event , must logical survival_predictions survival predictions patients, must numeric","code":""},{"path":"/reference/get_recalibrate_param_type_1_cox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the \\(\\alpha\\) value for the recalibration. — get_recalibrate_param_type_1_cox","text":"\\(\\alpha\\) value.","code":""},{"path":"/reference/get_recalibrate_param_type_1_cox.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Obtain the \\(\\alpha\\) value for the recalibration. — get_recalibrate_param_type_1_cox","text":"C. S. Crowson, “Assessing calibration prognostic risk scores - Cynthia S Crowson, Elizabeth J Atkinson, Terry M Therneau, 2016,” Statistical Methods Medical Research, 2016. https://journals.sagepub.com/doi/10.1177/0962280213497434 (accessed Nov. 17, 2023).","code":""},{"path":"/reference/get_recalibrate_param_type_1_cox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain the \\(\\alpha\\) value for the recalibration. — get_recalibrate_param_type_1_cox","text":"","code":"if (FALSE) { # \\dontrun{ get_recalibrate_param_type_1_cox(data, s0) } # }"},{"path":"/reference/mv_model_cox.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a cox model. — mv_model_cox","title":"Creates a cox model. — mv_model_cox","text":"Creates Cox model variables needed used functions along package. Cox model follows $$S_0(t)^{exp(\\beta \\cdot X)}$$ need fullfill requirements model. predicting survival/risk \\(X\\) center values meas derivation data, normally reported inside articles.","code":""},{"path":"/reference/mv_model_cox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a cox model. — mv_model_cox","text":"","code":"mv_model_cox(coefficients, means, formula, S0 = NULL)"},{"path":"/reference/mv_model_cox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a cox model. — mv_model_cox","text":"coefficients \\(\\beta\\) values model. means Mean values variables derivation dataset. formula Formula model. S0 Value \\(S_0(t)\\) function time study.","code":""},{"path":"/reference/mv_model_cox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a cox model. — mv_model_cox","text":"model used along package next characteristics empty generated functions package. coefficients: \\(\\beta\\) values model. means: Mean values variables derivation dataset. formula: Formula model. S0: Value \\(S_0(t)\\) function time study. alpha: Recalibration parameter type 1 recalibration. S0_type_2: Value \\(S_0(t)\\) function time study type 2 recalibration. beta_overall: Recalibration parameter type 2 recalibration. predictions_aggregated: Aggregated predictions validation data. predictions_data: predictions validation data including imputations. betax: Aggregated \\(\\beta \\cdot X\\) values validation data. betax_data: predictions validation data including imputations. predictions_recal_type_1: Aggregated predictions recalibrating type 1 recalibration. predictions_recal_type_2: Aggregated predictions recalibrating type 2 recalibration. c_index: Harrell C-Index predictions validation cohort.","code":""},{"path":"/reference/mv_model_cox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a cox model. — mv_model_cox","text":"","code":"model <- mv_model_cox(   coefficients = list(x = 0.5, z = 0.3),   means = list(x = 3, z = 0.2),   formula = event ~ x + z,   S0 = 0.98765 )"},{"path":"/reference/mv_model_logreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a logistic regression model — mv_model_logreg","title":"Creates a logistic regression model — mv_model_logreg","text":"Creates logistic regression model requirements external validation. logistic regression model calculates predictions following next equation. $$p(X) = \\frac{1}{1 + e^{-(\\beta \\cdot X)}}$$ can observe prediction depends \\(\\beta\\) coefficients covariable values, \\(X\\). logistic regression model parameter called intercept usually represented \\(\\beta_0\\). risk prediction derived log-odds function. $$log(\\frac{p}{1 - p}) = \\beta_0 + \\beta_1 \\cdot X_1 + \\beta_2 \\cdot X_2 + \\dots + \\beta_p \\cdot X_p$$ can see intercept value associated covariable. Therefore function parameters minimum needed obtain predictions.","code":""},{"path":"/reference/mv_model_logreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a logistic regression model — mv_model_logreg","text":"","code":"mv_model_logreg(coefficients, formula, intercept)"},{"path":"/reference/mv_model_logreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a logistic regression model — mv_model_logreg","text":"coefficients named list containing \\(\\beta\\) coefficients model without intercept formula model formula intercept Intercept value","code":""},{"path":"/reference/mv_model_logreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a logistic regression model — mv_model_logreg","text":"model used along package next characteristics empty generated functions package. coefficients: \\(\\beta\\) values model without intercept. formula: Formula model. intercept: Intercept value model. alpha_type_1: \\(\\alpha\\) value type 1 recalibration. alpha_type_2: \\(\\alpha\\) value type 2 recalibration. beta_overall: \\(\\beta_{overall}\\) value type 2 recalibration. predictions_aggregated: Aggregated predictions validation data. predictions_data: predictions validation data imputation. betax: Aggregated \\(\\beta \\cdot X\\) values validation data. betax_data: \\(\\beta \\cdot X\\) values validation imputation. predictions_recal_type_1: Aggregated predictions recalibrating type 1 recalibration. predictions_recal_type_2: Aggregated predictions recalibrating type 2 recalibration. c_index: Harrell C-Index predictions validation cohort.","code":""},{"path":"/reference/mv_model_logreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a logistic regression model — mv_model_logreg","text":"","code":"model <- mv_model_logreg(   coefficients = list(x = 0.5, z = 0.3),   formula = event ~ x + z,   intercept = 1.2 )"}]
